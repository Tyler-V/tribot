package scripts.agility_old;

import java.util.Arrays;
import java.util.List;

import scripts.agility_old.OBSTACLE;

public enum COURSE {

	ARDOUGNE_ROOFTOP(90, true,
			Arrays.asList(OBSTACLE.ARDOUGNE_WOODEN_BEAMS, OBSTACLE.ARDOUGNE_GAP_1, OBSTACLE.ARDOUGNE_PLANK,
					OBSTACLE.ARDOUGNE_GAP_2, OBSTACLE.ARDOUGNE_GAP_3, OBSTACLE.ARDOUGNE_STEEP_ROOF,
					OBSTACLE.ARDOUGNE_GAP_4)),

	RELLEKKA_ROOFTOP(80, true,
			Arrays.asList(OBSTACLE.RELLEKKA_WALL, OBSTACLE.RELLEKKA_GAP_1, OBSTACLE.RELLEKKA_TIGHTROPE_1,
					OBSTACLE.RELLEKKA_GAP_2, OBSTACLE.RELLEKKA_GAP_3, OBSTACLE.RELLEKKA_TIGHTROPE_2,
					OBSTACLE.RELLEKKA_PILE_OF_FISH)),

	POLLNIVNEACH_ROOFTOP(70, false,
			Arrays.asList(OBSTACLE.POLLNIVNEACH_BASKET, OBSTACLE.POLLNIVNEACH_STALL, OBSTACLE.POLLNIVNEACH_BANNER,
					OBSTACLE.POLLNIVNEACH_GAP, OBSTACLE.POLLNIVNEACH_TREE_1, OBSTACLE.POLLNIVNEACH_WALL,
					OBSTACLE.POLLNIVNEACH_BARS, OBSTACLE.POLLNIVNEACH_TREE_2, OBSTACLE.POLLNIVNEACH_LINE)),

	SEERS_ROOFTOP(60, true, Arrays.asList(OBSTACLE.SEERS_WALL, OBSTACLE.SEERS_GAP_1, OBSTACLE.SEERS_TIGHTROPE,
			OBSTACLE.SEERS_GAP_2, OBSTACLE.SEERS_GAP_3, OBSTACLE.SEERS_EDGE)),

	FALADOR_ROOFTOP(50, true, Arrays.asList(OBSTACLE.FALADOR_WALL, OBSTACLE.FALADOR_TIGHTROPE_1,
			OBSTACLE.FALADOR_HAND_HOLDS, OBSTACLE.FALADOR_GAP_1, OBSTACLE.FALADOR_GAP_2, OBSTACLE.FALADOR_TIGHTROPE_2,
			OBSTACLE.FALADOR_TIGHTROPE_3, OBSTACLE.FALADOR_GAP_3, OBSTACLE.FALADOR_LEDGE_1, OBSTACLE.FALADOR_LEDGE_2,
			OBSTACLE.FALADOR_LEDGE_3, OBSTACLE.FALADOR_LEDGE_4, OBSTACLE.FALADOR_EDGE)),

	CANIFIS_ROOFTOP(50, false,
			Arrays.asList(OBSTACLE.CANIFIS_TREE, OBSTACLE.CANIFIS_GAP_1, OBSTACLE.CANIFIS_GAP_2, OBSTACLE.CANIFIS_GAP_3,
					OBSTACLE.CANIFIS_GAP_4, OBSTACLE.CANIFIS_POLE_VAULT, OBSTACLE.CANIFIS_GAP_5,
					OBSTACLE.CANIFIS_GAP_6)),

	VARROCK_ROOFTOP(30, true,
			Arrays.asList(OBSTACLE.VARROCK_ROUGH_WALL, OBSTACLE.VARROCK_CLOTHES_LINE, OBSTACLE.VARROCK_GAP_1,
					OBSTACLE.VARROCK_WALL, OBSTACLE.VARROCK_GAP_2, OBSTACLE.VARROCK_GAP_3, OBSTACLE.VARROCK_GAP_4,
					OBSTACLE.VARROCK_LEDGE, OBSTACLE.VARROCK_EDGE)),

	AL_KHARID_ROOFTOP(20, true,
			Arrays.asList(OBSTACLE.AL_KHARID_ROUGH_WALL, OBSTACLE.AL_KHARID_TIGHTROPE_1, OBSTACLE.AL_KHARID_CABLE,
					OBSTACLE.AL_KHARID_ZIP_LINE, OBSTACLE.AL_KHARID_TROPICAL_TREE, OBSTACLE.AL_KHARID_ROOF_TOP_BEAMS,
					OBSTACLE.AL_KHARID_TIGHTROPE_2, OBSTACLE.AL_KHARID_GAP)),

	DRAYNOR_ROOFTOP(10, true,
			Arrays.asList(OBSTACLE.DRAYNOR_ROUGH_WALL, OBSTACLE.DRAYNOR_TIGHTROPE_1, OBSTACLE.DRAYNOR_TIGHTROPE_2,
					OBSTACLE.DRAYNOR_NARROW_WALL, OBSTACLE.DRAYNOR_WALL, OBSTACLE.DRAYNOR_GAP, OBSTACLE.DRAYNOR_CRATE)),

	GNOME_STRONGHOLD(1, true,
			Arrays.asList(OBSTACLE.GNOME_LOG_BALANCE, OBSTACLE.GNOME_OBSTACLE_NET_1, OBSTACLE.GNOME_TREE_BRANCH_1,
					OBSTACLE.GNOME_BALANCING_ROPE, OBSTACLE.GNOME_TREE_BRANCH_2, OBSTACLE.GNOME_TREE_NET_2,
					OBSTACLE.GNOME_TREE_TUNNEL));

	private final int level;
	private final boolean auto;
	private final List<OBSTACLE> obstacles;

	COURSE(int level, boolean auto, List<OBSTACLE> obstacles) {
		this.level = level;
		this.auto = auto;
		this.obstacles = obstacles;
	}

	public OBSTACLE getStartingObstacle() {
		return obstacles.get(0);
	}

	public int getLevelRequired() {
		return this.level;
	}

	public boolean isAutoSwitchCourse() {
		return this.auto;
	}

	public List<OBSTACLE> getObstacles() {
		return this.obstacles;
	}

}
